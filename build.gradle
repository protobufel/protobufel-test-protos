buildscript {
    repositories {
        jcenter()
        mavenCentral()
        //maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
    }
}

plugins {
    id 'java-library'
    id 'maven'
    id 'signing'

    id 'io.codearte.nexus-staging' version "0.9.0"
    id 'net.researchgate.release' version '2.6.0'

    id 'build-dashboard'

    id 'nebula.gradle-git-scm' version '3.0.1'
    id 'com.google.protobuf' version '0.8.1'
}

repositories {
    jcenter()
    mavenCentral()
}

group = 'com.github.protobufel'
archivesBaseName = 'protobufel-test-protos'
sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    //api '...'
    implementation group: 'com.google.protobuf', name: 'protobuf-java', version: '2.6.1'
}

sourceSets {
    test {
        proto {
            srcDirs(sourceSets.main.proto.srcDirs)
        }
    }
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:2.6.1'
    }

    generateProtoTasks {
        ofSourceSet('main').each { task ->
            task.builtins {
                java {
                    task.generateDescriptorSet = true
                    task.descriptorSetOptions.path =
                            "$buildDir/resources/main/FileDescriptorSetWithSourceInfo"
                    task.descriptorSetOptions.includeSourceInfo = true
                    task.descriptorSetOptions.includeImports = true
                }
            }
        }

        ofSourceSet('test').each { task ->
            task.builtins {
                java {
                    task.generateDescriptorSet = true
                    task.descriptorSetOptions.path =
                            "$buildDir/resources/main/FileDescriptorSet"
                    task.descriptorSetOptions.includeSourceInfo = false
                    task.descriptorSetOptions.includeImports = false
                }
            }
        }
    }
}

assemble.dependsOn compileTestJava

if (project.hasProperty('ossrhUsername')) {
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project {
                    name 'protobufel-test-protos'
                    packaging 'jar'
                    description 'Shared Test Resources - test .proto files'
                    url 'https://github.com/protobufel/protobufel-test-protos'

                    scm {
                        connection 'scm:git:https://github.com/protobufel/protobufel-test-protos.git'
                        developerConnection 'scm:git@github.com:protobufel/protobufel-test-protos.git'
                        url 'https://github.com/protobufel/protobufel-test-protos'
                    }

                    licenses {
                        license {
                            name 'The BSD 3-Clause License'
                            url 'http://opensource.org/licenses/BSD-3-Clause'
                        }
                    }

                    developers {
                        developer {
                            id 'protobufel'
                            name 'David Tesler'
                            email 'protobufel@gmail.com'
                        }
                    }
                }
            }
        }
    }

    nexusStaging {
        //packageGroup = "com.github.protobufel.multikeymapjava" //optional if packageGroup == project.getGroup()
        stagingProfileId = "com.github.protobufel" //when not defined will be got from server using "packageGroup"
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    signing {
        sign configurations.archives
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

    release {
        preCommitText = ''
        preTagCommitMessage = 'pre tag commit: '
        tagCommitMessage = 'bumped to '
        newVersionCommitMessage = 'new version commit: '
//        tagTemplate = "${version}"
    }

    afterReleaseBuild.dependsOn uploadArchives
} else {
    test {
        testLogging {
            events "PASSED", "FAILED", "SKIPPED"
            exceptionFormat "short"

            debug {
                events "skipped", "failed"
                exceptionFormat "full"
            }

            info.events = ["failed", "skipped"]
        }
    }
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version)
    }
}